#!/usr/bin/env node

let benchmark = require('benchmark')
let shortid = require('shortid')
let uuid4 = require('uuid/v4')
let chalk = require('chalk')
let rndm = require('rndm')
let srs = require('secure-random-string')
let uid = require('uid-safe')

let asyncGenerate = require('../async/generate')
let nonSecure = require('../non-secure')
let generate = require('../generate')
let nanoid = require('../')
let async = require('../async')

let suite = new benchmark.Suite()

function formatNumber (number) {
  return String(number)
    .replace(/\d\d\d$/, ',$&')
    .replace(/^(\d)(\d\d\d)/, '$1,$2')
}

suite
  .add('nanoid', () => {
    nanoid()
  })
  .add('nanoid/generate', () => {
    generate('1234567890abcdef-', 10)
  })
  .add('uid.sync', () => {
    uid.sync(14)
  })
  .add('uuid/v4', () => {
    uuid4()
  })
  .add('secure-random-string', () => {
    srs()
  })
  .add('shortid', () => {
    shortid()
  })
  .add('nanoid/async', {
    defer: true,
    fn (defer) {
      async().then(() => {
        defer.resolve()
      })
    }
  })
  .add('nanoid/async/generate', {
    defer: true,
    fn (defer) {
      asyncGenerate('1234567890abcdef-', 10).then(() => {
        defer.resolve()
      })
    }
  })
  .add('secure-random-string', {
    defer: true,
    fn (defer) {
      srs(() => {
        defer.resolve()
      })
    }
  })
  .add('uid', {
    defer: true,
    fn (defer) {
      uid(14).then(() => {
        defer.resolve()
      })
    }
  })
  .add('nanoid/non-secure', () => {
    nonSecure()
  })
  .add('rndm', () => {
    rndm(21)
  })
  .on('cycle', event => {
    let name = event.target.name.padEnd('nanoid/async/generate'.length)
    let hz = formatNumber(event.target.hz.toFixed(0)).padStart(9)
    if (event.target.name === 'nanoid/async') {
      name = '\nAsync:\n' + name
    } else if (event.target.name === 'nanoid/non-secure') {
      name = '\nNon-secure:\n' + name
    }
    process.stdout.write(`${ name }   ${ chalk.bold(hz) } ops/sec\n`)
  })
  .run()
