#!/usr/bin/node --experimental-worker

const WORKERS = 8

let spawnSync = require('child_process').spawnSync
let Worker = require('worker_threads').Worker
let chalk = require('chalk')
let path = require('path')
let fs = require('fs')

if (!process.argv[2]) {
  process.stderr.write(chalk.red('Pass a file with alphabet as argument\n'))
  process.exit(1)
}

let input = path.join(process.cwd(), process.argv[2])
let output = path.join(__dirname, '..', 'compiled.js')

spawnSync('npx', ['webpack', '--mode', 'production', '--output', output, input])
let js = fs.readFileSync(output).toString()
fs.unlinkSync(output)

let match = js.match(/[A-Za-z0-9-_]{30,}/)
if (!match) {
  process.stderr.write(chalk.red('Alphabet was not found\n'))
  process.exit(1)
}
let alphabet = match[0].split('').sort().join('')

let best = {
  size: Infinity
}

let newline = false

let all = js.length * (js.length + 1) * (js.length + 1)
let step = 0
let lastPart = 0

function print (str) {
  process.stdout.write(str + '\n')
}

new Promise(resolve => {
  for (let i = 0; i < WORKERS; i++) {
    let finished = 0
    let worker = new Worker(path.join(__dirname, 'alphabet-worker.js'), {
      workerData: {
        alphabet,
        start: i,
        step: WORKERS,
        js
      }
    })
    worker.on('message', data => {
      if (data.finished) {
        finished += 1
        if (finished === WORKERS) {
          print('100%')
          print('The best alphabet:')
          print(chalk.bold.green(best.alphabet))
          resolve()
        }
      } else {
        if (data.size < best.size) {
          if (newline) process.stdout.write('\n')
          newline = false
          best = data
          print(best.alphabet)
        }
        step += data.steps
        let part = Math.floor(100 * step / all)
        if (part > lastPart) {
          lastPart = part
          print(chalk.gray(part + '%'))
        }
      }
    })
    worker.on('error', e => {
      throw e
    })
  }
})
